{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AzureBlobCSV",
						"type": "DatasetReference"
					},
					"name": "Employee"
				},
				{
					"dataset": {
						"referenceName": "AzureBlobCSV",
						"type": "DatasetReference"
					},
					"name": "Department"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureBlobCSV",
						"type": "DatasetReference"
					},
					"name": "SinkAgg"
				},
				{
					"dataset": {
						"referenceName": "AzureBlobCSV",
						"type": "DatasetReference"
					},
					"name": "SinkSort"
				},
				{
					"dataset": {
						"referenceName": "AzureBlobCSV",
						"type": "DatasetReference"
					},
					"name": "SinkUnion"
				}
			],
			"transformations": [
				{
					"name": "joinEmpDept"
				},
				{
					"name": "ModifyEmail",
					"description": "Autogenerated by data preview actions"
				},
				{
					"name": "ModifyDeptName",
					"description": "Autogenerated by data preview actions"
				},
				{
					"name": "AggDept"
				},
				{
					"name": "filterDeptIT2"
				},
				{
					"name": "SortColumns"
				},
				{
					"name": "AddSurrogateKey"
				},
				{
					"name": "RemoveColumns",
					"description": "Autogenerated by data preview actions"
				},
				{
					"name": "ModifyHireDate"
				},
				{
					"name": "filterDeptIT1"
				},
				{
					"name": "filterDeptFinance"
				},
				{
					"name": "MergeDeptITFinance"
				},
				{
					"name": "RemoveDupDept1",
					"description": "Autogenerated by data preview actions"
				},
				{
					"name": "RemoveDupDept2",
					"description": "Autogenerated by data preview actions"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EMPLOYEE_ID as short,",
				"          FIRST_NAME as string,",
				"          LAST_NAME as string,",
				"          EMAIL as string,",
				"          PHONE_NUMBER as string,",
				"          HIRE_DATE as date 'MM/dd/yyyy',",
				"          JOB_ID as string,",
				"          SALARY as short,",
				"          COMMISSION_PCT as string,",
				"          MANAGER_ID1 as short,",
				"          DEPARTMENT_ID as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Employee",
				"source(output(",
				"          DEPARTMENT_ID as short,",
				"          DEPARTMENT_NAME as string,",
				"          MANAGER_ID2 as short,",
				"          LOCATION_ID as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Department",
				"ModifyEmail, ModifyDeptName join(Employee@DEPARTMENT_ID == Department@DEPARTMENT_ID,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> joinEmpDept",
				"Employee derive(EMAIL = lower(EMAIL)) ~> ModifyEmail",
				"Department derive(DEPARTMENT_NAME = upper(DEPARTMENT_NAME)) ~> ModifyDeptName",
				"joinEmpDept aggregate(groupBy(DEPARTMENT_NAME),",
				"     COUNT = count(EMPLOYEE_ID)) ~> AggDept",
				"AggDept filter(equals(DEPARTMENT_NAME,\"IT\")) ~> filterDeptIT2",
				"joinEmpDept sort(asc(EMPLOYEE_ID, true),",
				"     partitionBy('hash', 1)) ~> SortColumns",
				"ModifyHireDate keyGenerate(output(SurrogateKey as long),",
				"     startAt: 1000L,",
				"     stepValue: 1L) ~> AddSurrogateKey",
				"SortColumns select(mapColumn(",
				"          EMPLOYEE_ID,",
				"          FIRST_NAME,",
				"          LAST_NAME,",
				"          EMAIL,",
				"          PHONE_NUMBER,",
				"          HIRE_DATE,",
				"          DEPARTMENT_ID = Employee@DEPARTMENT_ID,",
				"          DEPARTMENT_NAME",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> RemoveColumns",
				"RemoveColumns derive(HIRE_DATE_MOD = toString(HIRE_DATE,'YYYY/MM/DD')) ~> ModifyHireDate",
				"joinEmpDept filter(equals(DEPARTMENT_NAME,\"IT\")) ~> filterDeptIT1",
				"joinEmpDept filter(equals(DEPARTMENT_NAME,\"FINANCE\")) ~> filterDeptFinance",
				"RemoveDupDept1, RemoveDupDept2 union(byName: true)~> MergeDeptITFinance",
				"filterDeptIT1 select(mapColumn(",
				"          EMPLOYEE_ID,",
				"          FIRST_NAME,",
				"          LAST_NAME,",
				"          EMAIL,",
				"          PHONE_NUMBER,",
				"          HIRE_DATE,",
				"          JOB_ID,",
				"          SALARY,",
				"          COMMISSION_PCT,",
				"          MANAGER_ID1,",
				"          DEPARTMENT_ID = Employee@DEPARTMENT_ID,",
				"          DEPARTMENT_ID = Department@DEPARTMENT_ID,",
				"          DEPARTMENT_NAME,",
				"          MANAGER_ID2,",
				"          LOCATION_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveDupDept1",
				"filterDeptFinance select(mapColumn(",
				"          EMPLOYEE_ID,",
				"          FIRST_NAME,",
				"          LAST_NAME,",
				"          EMAIL,",
				"          PHONE_NUMBER,",
				"          HIRE_DATE,",
				"          JOB_ID,",
				"          SALARY,",
				"          COMMISSION_PCT,",
				"          MANAGER_ID1,",
				"          DEPARTMENT_ID = Employee@DEPARTMENT_ID,",
				"          DEPARTMENT_ID = Department@DEPARTMENT_ID,",
				"          DEPARTMENT_NAME,",
				"          MANAGER_ID2,",
				"          LOCATION_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveDupDept2",
				"filterDeptIT2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['EmpDept_Agg.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> SinkAgg",
				"AddSurrogateKey sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['EmpDept_Sorted.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> SinkSort",
				"MergeDeptITFinance sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['EmpDept_Union.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> SinkUnion"
			]
		}
	}
}